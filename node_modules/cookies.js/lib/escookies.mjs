import objectAssign from 'es-object-assign';
import { isNumber } from 'es-is';

// src/cookies.coffee
var Cookies;

Cookies = (function() {
  function Cookies() {}

  Cookies.prototype.contructor = function(defaults) {
    this.defaults = defaults != null ? defaults : {};
  };

  Cookies.prototype.api = function(key, value, attrs) {
    var attr, cookie, cookies, err, expires, i, name, parts, rdecode, result, strAttrs;
    if (typeof document === 'undefined') {
      return;
    }
    if (arguments.length > 1) {
      attrs = objectAssign({
        path: '/'
      }, this.defaults, attrs);
      if (isNumber(attrs.expires)) {
        expires = new Date;
        expires.setMilliseconds(expires.getMilliseconds() + attrs.expires * 864e+5);
        attrs.expires = expires;
      }
      attrs.expires = attrs.expires ? attrs.expires.toUTCString() : '';
      try {
        result = JSON.stringify(value);
        if (/^[\{\[]/.test(result)) {
          value = result;
        }
      } catch (error) {
        err = error;
      }
      value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
      key = encodeURIComponent(String(key));
      key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
      key = key.replace(/[\(\)]/g, escape);
      strAttrs = '';
      for (name in attrs) {
        attr = attrs[name];
        if (!attr) {
          continue;
        }
        strAttrs += '; ' + name;
        if (attr === true) {
          continue;
        }
        strAttrs += '=' + attr;
      }
      return document.cookie = key + '=' + value + strAttrs;
    }
    if (!key) {
      result = {};
    }
    cookies = document.cookie ? document.cookie.split('; ') : [];
    rdecode = /(%[0-9A-Z]{2})+/g;
    i = 0;
    while (i < cookies.length) {
      parts = cookies[i].split('=');
      cookie = parts.slice(1).join('=');
      if (cookie.charAt(0) === '"') {
        cookie = cookie.slice(1, -1);
      }
      try {
        name = parts[0].replace(rdecode, decodeURIComponent);
        cookie = cookie.replace(rdecode, decodeURIComponent);
        if (key === name) {
          result = cookie;
          break;
        }
        if (!key) {
          result[name] = cookie;
        }
      } catch (error) {
        err = error;
      }
    }
    return result;
  };

  Cookies.prototype.get = function(key) {
    return this.api(key);
  };

  Cookies.prototype.getJSON = function(key) {
    var err;
    try {
      return JSON.parse(this.api(key));
    } catch (error) {
      err = error;
      return {};
    }
  };

  Cookies.prototype.set = function(key, value, attrs) {
    return this.api(key, value, attrs);
  };

  Cookies.prototype.remove = function(key, attrs) {
    return this.api(key, '', objectAssign(attrs, {
      expires: -1
    }));
  };

  return Cookies;

})();

var Cookies$1 = Cookies;

// src/index.coffee
var index = new Cookies$1();

export default index;
//# sourceMappingURL=escookies.mjs.map
